package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

type Fish struct {
	ID     int
	X, Y   int
	Speed  int
	Offset int
}

type Room struct {
	// 其他字段...
	FishGroup []*Fish
}

func main() {
	// 初始化房间
	room := &Room{
		FishGroup: make([]*Fish, 0),
	}

	// 启动一个协程，模拟游戏循环
	go handRoomRun(room)

	// 模拟游戏进行一段时间
	time.Sleep(3 * time.Second)
}

func handRoomRun(room *Room) {
	// 游戏循环，每500ms更新一次鱼的位置
	ticker := time.NewTicker(500 * time.Millisecond)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			// 在每个时间间隔内更新鱼的位置
			updateFishPositions(room)

			// 广播更新后的鱼群状态给所有玩家
			broadcastFishPositions(room)
		}
	}
}

func updateFishPositions(room *Room) {
	for _, fish := range room.FishGroup {
		offset := rand.Intn(fish.Speed)
		fish.Offset += offset
		fish.X += offset
		fish.Y += offset
	}
}

func broadcastFishPositions(room *Room) {
	// 这里实现向房间内所有玩家广播鱼群的状态
	// 可以使用房间内的玩家列表进行广播
	// ...
	fmt.Println("Broadcasting fish positions to players")
}
